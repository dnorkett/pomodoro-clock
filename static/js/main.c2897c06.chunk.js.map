{"version":3,"sources":["TimerControl.js","SessionControl.js","App.js","index.js"],"names":["TimerControl","props","className","id","this","componentId","componentTitle","decrementId","onClick","decrementFunction","timerType","lengthId","length","incrementId","incrementFunction","React","Component","SessionControl","timerFunction","resetFunction","App","state","timer","breakLength","sessionLength","timerStatus","convertToClock","bind","reset","decrementTimer","incrementTimer","startStopTimer","tick","minutes","Math","floor","seconds","clearInterval","intervalID","audioBeep","pause","currentTime","setState","setInterval","play","preload","src","ref","audio","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2897c06.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nclass TimerControl extends React.Component {\r\n    constructor(props) {\r\n      super(props);    \r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"timerControlContainer\" id={this.props.componentId}>\r\n          <p className=\"timerControlDisplay\">{this.props.componentTitle}</p>\r\n          <div className=\"controls\">\r\n            <button id={this.props.decrementId} onClick={() => this.props.decrementFunction(this.props.timerType)}>\r\n              <i className=\"fa fa-arrow-down\"></i> \r\n            </button>\r\n              \r\n            <span className=\"timerControlDisplay\" id={this.props.lengthId}>{this.props.length}</span>\r\n            \r\n            <button id={this.props.incrementId} onClick={() => this.props.incrementFunction(this.props.timerType)}>\r\n              <i className=\"fa fa-arrow-up\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default TimerControl;","import React from 'react';\r\nimport './App.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nclass SessionControl extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n            <button id=\"start_stop\" onClick={this.props.timerFunction}>\r\n              <i className=\"fa fa-play\"></i>  <i className=\"fa fa-pause\"></i> \r\n            </button>\r\n            <button id=\"reset\" onClick={this.props.resetFunction}>\r\n              <i className=\"fa fa-refresh\"></i>\r\n            </button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default SessionControl;","import React from 'react';\nimport './App.css';\nimport TimerControl from './TimerControl';\nimport SessionControl from './SessionControl';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n         timer: 1500,\n         breakLength: 300,\n         sessionLength: 1500,\n         timerStatus: 'stopped',\n         timerType: 'Session'\n    };\n    this.convertToClock = this.convertToClock.bind(this);  \n    this.reset = this.reset.bind(this);    \n    this.decrementTimer = this.decrementTimer.bind(this);\n    this.incrementTimer = this.incrementTimer.bind(this);\n    this.startStopTimer = this.startStopTimer.bind(this);\n    this.tick = this.tick.bind(this);    \n  }\n\n  convertToClock() {\n    let minutes = Math.floor(this.state.timer / 60);\n    let seconds = Math.floor(this.state.timer % 60);\n\n    return `${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`\n  }\n\n  reset() {\n    clearInterval(this.intervalID);\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n\n    this.setState({\n      timer: 1500,\n      breakLength: 300,\n      sessionLength: 1500,\n      timerStatus: 'stopped',\n      timerType: 'Session'\n    });\n  }\n\n  decrementTimer(timerType) {\n    if (this.state.timerStatus == 'stopped') {\n      switch (timerType) {\n        case 'breakLength':\n          this.setState({\n            breakLength: this.state.breakLength >= 120 ? this.state.breakLength - 60 : this.state.breakLength\n          });\n          break;\n        case 'sessionLength':\n          this.setState({\n            sessionLength: this.state.sessionLength >= 120 ? this.state.sessionLength - 60 : this.state.sessionLength,\n            timer: this.state.sessionLength >= 120 ? this.state.sessionLength - 60 : this.state.sessionLength,\n          });\n          break;\n      }\n    }\n  }\n\n  incrementTimer(timerType) {\n    if (this.state.timerStatus == 'stopped') {\n      switch (timerType) {\n        case 'breakLength':\n          this.setState({\n            breakLength: this.state.breakLength <= 3540 ? this.state.breakLength + 60 : this.state.breakLength\n          });\n          break;\n        case 'sessionLength':\n          this.setState({\n            sessionLength: this.state.sessionLength <= 3540 ?  this.state.sessionLength + 60 : this.state.sessionLength,\n            timer: this.state.sessionLength <= 3540 ?  this.state.sessionLength + 60 : this.state.sessionLength\n          });\n          break;\n      }\n    }\n  }\n\n  startStopTimer() {\n    if (this.state.timerStatus == 'stopped') {\n      this.intervalID = setInterval(() => this.tick(), 1000);\n      this.setState({timerStatus: 'running'});\n    }\n\n    if (this.state.timerStatus == 'running') {\n      clearInterval(this.intervalID);\n      this.setState({timerStatus: 'stopped'});\n    }    \n  }\n\n  tick() {\n    if (this.state.timer > 0) {\n      this.setState({\n        timer: this.state.timer - 1\n      })\n    } else if(this.state.timer == 0) {\n        this.audioBeep.play();\n        clearInterval(this.intervalID);\n\n      if (this.state.timerType == 'Session') {\n        this.setState({\n          timerStatus: 'stopped',\n          timerType: 'Break',\n          timer: this.state.breakLength,\n        }, this.startStopTimer);\n        \n      } else {\n        this.setState({\n          timerStatus: 'stopped',\n          timerType: 'Session',\n          timer: this.state.sessionLength\n        }, this.startStopTimer);        \n      }      \n    }\n  }\n  \n  render() {\n    return (\n      <div id=\"main_app\">\n        <h1 id=\"pageTitle\"> Pomodoro Clock </h1>\n        <div id=\"timerControls\" className=\"controls\">\n          <TimerControl \n            length={this.state.breakLength / 60}\n            componentId='break-label'\n            componentTitle='Break Length'\n            lengthId=\"break-length\"\n            decrementId='break-decrement'\n            incrementId='break-increment'    \n            timerType='breakLength'               \n            decrementFunction={this.decrementTimer}\n            incrementFunction={this.incrementTimer}\n            />\n          <TimerControl \n            length={this.state.sessionLength / 60}\n            componentId='session-label'\n            componentTitle='Session Length'\n            lengthId=\"session-length\"            \n            decrementId='session-decrement'\n            incrementId='session-increment'\n            timerType='sessionLength'                                              \n            decrementFunction={this.decrementTimer}\n            incrementFunction={this.incrementTimer}\n            />\n        </div>\n        <div id=\"timerDisplay\">\n          <p id=\"timer-label\"> {this.state.timerType} </p>\n          <p id=\"time-left\"> {this.convertToClock()} </p>\n        </div>\n        \n        <div id=\"sessionControls\" className=\"controls\">\n          <SessionControl \n            resetFunction={this.reset}\n            timerFunction={this.startStopTimer}\n          />\n          <audio id=\"beep\" preload=\"auto\" src=\"https://donnorkett.com/files/sounds/Simple-alert-bells-tone.mp3\" ref={(audio) => { this.audioBeep = audio; }}/>     \n        </div>       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}